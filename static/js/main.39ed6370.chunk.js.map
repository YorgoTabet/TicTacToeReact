{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","handleClick","history","state","slice","stepNumber","length","calculateWinner","xIsNext","setState","concat","console","log","Array","fill","step","status","current","winner","moves","map","move","desc","jumpTo","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"0OAKA,SAASA,EAAOC,GAEV,OACE,wBACCC,UAAU,SACVC,QAAUF,EAAME,QAFjB,SAIGF,EAAMG,Q,IAMTC,E,kKAEJ,SAAaC,GAAI,IAAD,OACd,OACC,cAACN,EAAD,CACCI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAW,kBAAK,EAAKF,MAAME,QAAQG,Q,oBAKvC,WACE,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA3BTC,IAAMC,WAkCpBC,E,kDAEJ,WAAYX,GAAO,IAAD,8BACd,cAAMA,IAkBVY,YAAc,SAACP,GACX,IAAMQ,EAAU,EAAKC,MAAMD,QAAQE,MAAM,EAAG,EAAKD,MAAME,WAAa,GAE9DT,EADUM,EAAQA,EAAQI,OAAS,GACjBV,QAAQQ,QAE7BG,EAAgBX,IAAYA,EAAQF,KAGvCE,EAAQF,GAAK,EAAKS,MAAMK,QAAU,IAAM,IACxC,EAAKC,SAAS,CACVP,QAASA,EAAQQ,OAAO,CAAC,CACrBd,aAEHY,SAAU,EAAKL,MAAMK,QACrBH,WAAYH,EAAQI,SAEzBK,QAAQC,IAAI,EAAKT,MAAMK,WAhCvB,EAAKL,MAAQ,CACLD,QAAS,CAAC,CACNN,QAASiB,MAAM,GAAGC,KAAK,QAE3BN,SAAS,EACTH,WAAY,GARN,E,0CAYlB,SAAOU,GACHpB,KAAKc,SAAS,CACVJ,WAAYU,EACZP,QAAUO,EAAO,IAAO,M,oBAwBhC,WAAU,IAeFC,EAfC,OACCd,EAAUP,KAAKQ,MAAMD,QACrBe,EAAUf,EAAQP,KAAKQ,MAAME,YAC7Ba,EAASX,EAAgBU,EAAQrB,SAEjCuB,EAAQjB,EAAQkB,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EAAI,uBACDA,GAAS,mBACzB,OACI,6BACC,wBAAQ9B,QAAW,kBAAM,EAAKgC,OAAOF,IAArC,SAA6CC,KADrCD,MAYnB,OAJML,EADDE,EACO,oBAAgBA,GAEhB,uBAAmBvB,KAAKQ,MAAMK,QAAS,IAAM,KAGvD,sBAAKlB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACAG,QAAWqB,EAAQrB,QACnBL,QAAW,SAACG,GAAD,OAAO,EAAKO,YAAYP,QAErC,sBAAKJ,UAAU,YAAf,UACE,8BAAM0B,IACN,6BAAKG,c,GAvEIrB,IAAMC,WAuFzB,SAASQ,EAAgBX,GAWvB,IAVA,IAAM4B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA9B,EAAI,EAAGA,EAAI8B,EAAMlB,OAAQZ,IAAK,CACrC,kBAAkB8B,EAAM9B,GAAxB,GAAO+B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI/B,EAAQ6B,IAAM7B,EAAQ6B,KAAO7B,EAAQ8B,IAAM9B,EAAQ6B,KAAO7B,EAAQ+B,GACpE,OAAO/B,EAAQ6B,GAGnB,OAAO,KAtBTG,IAASC,OACP,cAAC7B,EAAD,IACA8B,SAASC,eAAe,U","file":"static/js/main.39ed6370.chunk.js","sourcesContent":["import { logDOM } from '@testing-library/dom';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props)  {\r\n\r\n      return (\r\n        <button\r\n         className=\"square\"\r\n         onClick={ props.onClick }\r\n        >\r\n          {props.value}\r\n        </button>\r\n      );\r\n    }\r\n  \r\n  \r\n  class Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n      return (\r\n       <Square\r\n        value={this.props.squares[i]}\r\n        onClick = {()=> this.props.onClick(i)}\r\n       />\r\n       )\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n                history: [{\r\n                    squares: Array(9).fill(null),\r\n                }],\r\n                xIsNext: true,\r\n                stepNumber: 0,\r\n        }\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        })\r\n    }\r\n    \r\n    handleClick = (i) => {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        if(calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares,\r\n            }]),\r\n             xIsNext: !this.state.xIsNext,\r\n             stepNumber: history.length\r\n            });\r\n        console.log(this.state.xIsNext);\r\n    }\r\n\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n            `Go to move # ${move}` : 'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                 <button onClick = {() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            )\r\n        })\r\n\r\n        let status;\r\n        if(winner){\r\n            status = `Winner is ${winner}`\r\n        }else {\r\n            status = `Next player: ${this.state.xIsNext? 'X' : 'O'}`\r\n        }\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n            squares = {current.squares}\r\n            onClick = {(i) => this.handleClick(i)} />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  \r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }"],"sourceRoot":""}